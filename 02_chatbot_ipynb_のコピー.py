# -*- coding: utf-8 -*-
"""02_chatbot.ipynb のコピー

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1teF-__UI9bItdxdr9XesHR2gXF3OJU_6

# チャットボットの構築
StreamlitとChatGPT APIを使い、チャットボットを構築します。

## ライブラリのインストール
Streamlit、およびアプリの動作の確認に使用する「ngrok」をインストールします。  
また、ChatGPT APIを使用するために必要なライブラリ、openaiをインストールします。
"""

!pip install streamlit==1.20.0 --quiet
!pip install pyngrok --quiet
!pip install "openai<1.0.0"

"""インストールの完了後、streamlit、ngrok、およびopenaiをインポートしておきます。"""

import streamlit as st
from pyngrok import ngrok
import openai

"""## チャットボットのコード
`%%writefile`のマジックコマンドを使って、チャットボットのコードを「app.py」に書き込みます。  
Streamlitでは、値を保持するために「st.session_state」を使います。  
https://docs.streamlit.io/library/api-reference/session-state
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# # 以下を「app.py」に書き込み
# import streamlit as st
# import openai
# import secret_keys  # 外部ファイルにAPI keyを保存
# 
# openai.api_key = secret_keys.openai_api_key
# 
# # st.session_stateを使いメッセージのやりとりを保存
# if "messages" not in st.session_state:
#     st.session_state["messages"] = [
#         {"role": "system", "content": "あなたは優秀なアシスタントAIです。"}
#         ]
# 
# # チャットボットとやりとりする関数
# def communicate():
#     messages = st.session_state["messages"]
# 
#     user_message = {"role": "user", "content": st.session_state["user_input"]}
#     messages.append(user_message)
# 
#     response = openai.ChatCompletion.create(
#         model="gpt-3.5-turbo",
#         messages=messages
#     )
# 
#     bot_message = response["choices"][0]["message"]
#     messages.append(bot_message)
# 
#     st.session_state["user_input"] = ""  # 入力欄を消去
# 
# 
# # ユーザーインターフェイスの構築
# st.title("My AI Assistant")
# st.write("ChatGPT APIを使ったチャットボットです。")
# 
# user_input = st.text_input("メッセージを入力してください。", key="user_input", on_change=communicate)
# 
# if st.session_state["messages"]:
#     messages = st.session_state["messages"]
# 
#     for message in reversed(messages[1:]):  # 直近のメッセージを上に
#         speaker = "🙂"
#         if message["role"]=="assistant":
#             speaker="🤖"
# 
#         st.write(speaker + ": " + message["content"])

"""## OpenAIのAPI keyを設定
ChatGPT APIを使用するために必要な「API key」を設定します。  
`%%writefile`のマジックコマンドを使って、API keyを設定するコードを「secret_keys.py」に書き込みます。  
以下のコードの、  
`openai_api_key = "Your API key"`  
における  
`Your API key`の箇所を、自分のAPI keyに置き換えます。  
ChatGPTのAPI keyは、OpenAIのサイトで取得できます。   
https://platform.openai.com/account/api-keys

"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile secret_keys.py
# 
# openai_api_key = "sk-None-tXrbbnZPdInaG1ZSB3zPT3BlbkFJCMBQasIgwWD9adVVvOfS"

"""API keyの流出にはリスクがあります。  
他者に知られないように、慎重に扱ってください。

## ngrokのAuthtokenを設定
ngrokで接続するために必要な「Authtoken」を設定します。  
以下のコードの、  
`!ngrok authtoken YourAuthtoken`  
における  
`YourAuthtoken`の箇所を、自分のAuthtokenに置き換えます。  
Authtokenは、ngrokのサイトに登録すれば取得することができます。  
https://ngrok.com/
"""

!ngrok authtoken 2jRxwApa7dN4zLtex6XyJxBPHGB_7qGhfpKWRv19VwJdGMJvX

"""ngrokのAuthtokenも、他者に知られないように慎重に扱ってください。

## アプリの起動
streamlitの`run`コマンドでアプリを起動します。
"""

!streamlit run app.py &>/dev/null&  # 「&>/dev/null&」により、出力を非表示にしてバックグランドジョブとして実行

"""ngrokのプロセスを終了した上で、新たにポートを指定して接続します。  
接続の結果、urlを取得できます。  
ngrokの無料プランでは同時に1つのプロセスしか動かせないので、エラーが発生した場合は「ランタイム」→「セッションの管理」で不要なGoogle Colabのセッションを修了しましょう。  
"""

ngrok.kill()
url = ngrok.connect("8501").public_url

"""## 動作の確認

URLのhttpの部分をhttpsに変換する関数を設定します。
"""

def convert_http_to_https(url):
    if url.startswith("http://"):
        url = url.replace("http://", "https://", 1)
    return url

"""変換したurlを表示し、リンク先でチャットボットが動作することを確認します。"""

print(convert_http_to_https(url))

"""チャットボットの動作確認後、OpenAIのサイトでAPIの使用量を確認してみましょう。  
https://platform.openai.com/account/usage
"""